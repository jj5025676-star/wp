<?php
/*
Plugin Name: API 网关
Description: 多接口统一调用与计费。支持接口分组与角色限制、按次扣费、每日免费次数、频率限制、API Key 调用、调用日志与CSV导出、前台余额短代码 [user_credits]。依赖“点券系统(credits-system)”提供的用户余额表。
Version: 1.5.1
Author: 你自己
*/

if (!defined('ABSPATH')) exit;

class AGC_V41 {
    const T_INTERFACES = 'agc_interfaces';
    const T_LOGS       = 'agc_logs';
    const T_BALANCE    = 'credits_balance';
    const OPT_SETTINGS = 'agc_settings';

    public function __construct() {
        register_activation_hook(__FILE__, [$this, 'on_activate']);
        add_action('admin_menu', [$this, 'admin_menu']);
        add_action('rest_api_init', [$this, 'register_routes']);
        add_shortcode('user_credits', [$this, 'shortcode_user_credits']);
        add_filter('plugin_action_links_' . plugin_basename(__FILE__), [$this, 'settings_link']);
        add_action('wp_ajax_agc_test_interface', [$this, 'ajax_test_interface']);
    }

    public function settings_link($links) {
        $url = admin_url('admin.php?page=agc_settings');
        $links[] = '<a href="'.$url.'">设置</a>';
        return $links;
    }

    public function on_activate() {
        global $wpdb;
        require_once ABSPATH . 'wp-admin/includes/upgrade.php';
        $charset = $wpdb->get_charset_collate();

        $sql1 = "CREATE TABLE IF NOT EXISTS {$wpdb->prefix}".self::T_INTERFACES." (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(191) NOT NULL,
            slug VARCHAR(191) NOT NULL,
            endpoint TEXT NOT NULL,
            method VARCHAR(10) NOT NULL DEFAULT 'POST',
            cost INT NOT NULL DEFAULT 1,
            headers TEXT NULL,
            body TEXT NULL,
            grp VARCHAR(191) NULL,
            roles VARCHAR(191) NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        ) $charset;";
        dbDelta($sql1);

        // 强制检测和修复 body 字段
        $cols = $wpdb->get_col("DESC {$wpdb->prefix}".self::T_INTERFACES, 0);
        if (!in_array('body', $cols)) {
            $wpdb->query("ALTER TABLE {$wpdb->prefix}".self::T_INTERFACES." ADD COLUMN body TEXT NULL AFTER headers");
        }

        $sql2 = "CREATE TABLE IF NOT EXISTS {$wpdb->prefix}".self::T_LOGS." (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            user_id BIGINT UNSIGNED NOT NULL,
            interface_id BIGINT UNSIGNED NOT NULL,
            cost INT NOT NULL,
            free_used TINYINT(1) DEFAULT 0,
            http_status INT NULL,
            duration_ms INT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        ) $charset;";
        dbDelta($sql2);

        $defaults = array(
            'daily_free' => 0,
            'rate_limit_n' => 5,
            'rate_limit_s' => 60,
            'api_key_meta' => 'agc_api_key'
        );
        $cur = get_option(self::OPT_SETTINGS);
        if (!is_array($cur)) update_option(self::OPT_SETTINGS, $defaults);
    }

    public function admin_menu() {
        add_menu_page('API 网关（计费）', 'API 网关（计费）', 'manage_options','agc_main', [$this, 'page_interfaces'], 'dashicons-randomize', 31);
        add_submenu_page('agc_main','接口配置','接口配置','manage_options','agc_main',[$this,'page_interfaces']);
        add_submenu_page('agc_main','用户余额','用户余额','manage_options','agc_balance',[$this,'page_balance_link']);
        add_submenu_page('agc_main','调用日志','调用日志','manage_options','agc_logs',[$this,'page_logs']);
        add_submenu_page('agc_main','设置','设置','manage_options','agc_settings',[$this,'page_settings']);
        add_submenu_page('agc_main','API Keys','API Keys','manage_options','agc_apikeys',[$this,'page_apikeys']);
    }

    public function page_balance_link() {
        echo '<div class="wrap"><h1>用户余额</h1><p>余额管理在“点券系统”插件中进行。</p>';
        echo '<p><a class="button button-primary" href="'.admin_url('admin.php?page=credits-system').'">前往点券系统</a></p></div>';
    }

    private function sanitize_headers($headers) {
        $headers = trim($headers);
        if ($headers === '') return '';
        $arr = json_decode($headers, true);
        if (json_last_error() !== JSON_ERROR_NONE || !is_array($arr)) {
            return false; // 标记不合法
        }
        return wp_json_encode($arr); // 重新标准化
    }

    public function page_interfaces() {
        if (!current_user_can('manage_options')) return;
        global $wpdb;
        $t = $wpdb->prefix . self::T_INTERFACES;

        $error_msg = '';
        $restore_post = false;
        $edit = null;

        // 删除接口
        if (isset($_GET['delete']) && is_numeric($_GET['delete'])) {
            $wpdb->delete($t, ['id'=>intval($_GET['delete'])]);
            echo '<div class="updated"><p>✅ 已删除接口。</p></div>';
        }

        if ($_SERVER['REQUEST_METHOD']==='POST' && check_admin_referer('agc_ifc')) {
            $id    = intval($_POST['id'] ?? 0);
            $name  = sanitize_text_field($_POST['name'] ?? '');
            $slug  = sanitize_title($_POST['slug'] ?? '');
            $endpoint = esc_url_raw($_POST['endpoint'] ?? '');
            $method = strtoupper(sanitize_text_field($_POST['method'] ?? 'POST'));
            if (!in_array($method, ['GET','POST'])) $method='POST';
            $cost  = max(0, intval($_POST['cost'] ?? 1));
            $headers_input = $_POST['headers'] ?? '';
            $headers = $this->sanitize_headers($headers_input);
            $body   = wp_unslash($_POST['body'] ?? '');
            $grp   = sanitize_text_field($_POST['grp'] ?? '');
            $roles = sanitize_text_field($_POST['roles'] ?? '');

            // 确保必要字段不为空
            if (!$name || !$endpoint) {
                $error_msg = '接口名称和 Endpoint 必填。';
                $restore_post = true;
            } elseif ($headers === false) {
                $error_msg = '请求头 JSON 格式不正确，请输入合法 JSON！';
                $restore_post = true;
            } else {
                $data = compact('name','slug','endpoint','method','cost','headers','grp','roles','body');

                if ($id>0) {
                    $wpdb->update($t, $data, ['id'=>$id]);
                    if ($wpdb->last_error) {
                        error_log('接口更新SQL: ' . $wpdb->last_query);
                        error_log('接口更新错误: ' . $wpdb->last_error);
                        $error_msg = '数据库错误: '.esc_html($wpdb->last_error);
                        $restore_post = true;
                    } else {
                        echo '<div class="updated"><p>✅ 已更新接口。</p></div>';
                        // 刷新页面
                        echo '<meta http-equiv="refresh" content="1;url='.esc_url(admin_url('admin.php?page=agc_main')).'">';
                        return;
                    }
                } else {
                    $wpdb->insert($t, $data);
                    if ($wpdb->last_error) {
                        error_log('接口插入SQL: ' . $wpdb->last_query);
                        error_log('接口插入错误: ' . $wpdb->last_error);
                        $error_msg = '数据库错误: '.esc_html($wpdb->last_error);
                        $restore_post = true;
                    } else {
                        echo '<div class="updated"><p>✅ 已添加接口。</p></div>';
                        // 刷新页面，防止重复提交和数据不即时显示
                        echo '<meta http-equiv="refresh" content="1;url='.esc_url(admin_url('admin.php?page=agc_main')).'">';
                        return;
                    }
                }
            }
            // 回填表单
            if ($restore_post) {
                $edit = (object)$_POST;
                $edit->headers = $headers_input;
            }
        }

        // 编辑模式（如果不是回填表单）
        if (!$edit && isset($_GET['edit'])) {
            $edit = $wpdb->get_row($wpdb->prepare("SELECT * FROM $t WHERE id=%d", intval($_GET['edit'])));
        }

        echo '<div class="wrap"><h1>接口配置</h1>';
        if (!empty($error_msg)) {
            echo '<div class="error"><p>' . esc_html($error_msg) . '</p></div>';
        }
        echo '<form method="post" style="max-width:900px">'; wp_nonce_field('agc_ifc');
        echo '<input type="hidden" name="id" value="'.esc_attr($edit->id ?? 0).'">';
        echo '<table class="form-table"><tbody>';
        echo '<tr><th>名称</th><td><input class="regular-text" name="name" value="'.esc_attr($edit->name ?? '').'" required></td></tr>';
        echo '<tr><th>Slug(可选)</th><td><input class="regular-text" name="slug" value="'.esc_attr($edit->slug ?? '').'"></td></tr>';
        echo '<tr><th>Endpoint</th><td><input class="regular-text" name="endpoint" value="'.esc_attr($edit->endpoint ?? '').'" required></td></tr>';
        echo '<tr><th>方法</th><td><select name="method"><option '.selected(($edit->method ?? ''),'POST',false).'>POST</option><option '.selected(($edit->method ?? ''),'GET',false).'>GET</option></select></td></tr>';
        echo '<tr><th>每次消耗</th><td><input type="number" min="0" name="cost" value="'.esc_attr($edit->cost ?? 1).'"> 点券</td></tr>';
        echo '<tr><th>请求头 JSON</th><td><textarea name="headers" class="large-text" rows="4">'.esc_textarea($edit->headers ?? '').'</textarea><p class="description">示例：{"Authorization":"Bearer xxx"}</p></td></tr>';
        echo '<tr><th>请求体 JSON</th><td><textarea name="body" class="large-text" rows="4">'.esc_textarea($edit->body ?? '').'</textarea><p class="description">示例：{"conversation_id":"123","messages":[{"role":"user","content":"你好"}]}</p></td></tr>';
        echo '<tr><th>分组</th><td><input name="grp" value="'.esc_attr($edit->grp ?? '').'"></td></tr>';
        echo '<tr><th>允许角色</th><td><input name="roles" value="'.esc_attr($edit->roles ?? '').'"><p class="description">多个用逗号分隔；留空表示所有已登录用户可用。</p></td></tr>';
        echo '</tbody></table>'; submit_button($edit?'保存修改':'添加接口'); echo '</form>';

        // 新增：接口列表展示
        $rows = $wpdb->get_results("SELECT * FROM $t ORDER BY id DESC");
        if ($rows) {
            echo '<h2>已添加接口</h2>';
            echo '<table class="widefat fixed striped"><thead>
                <tr>
                    <th>ID</th>
                    <th>名称</th>
                    <th>Slug</th>
                    <th>Endpoint</th>
                    <th>方法</th>
                    <th>分组</th>
                    <th>角色</th>
                    <th>操作</th>
                </tr></thead><tbody>';
            foreach ($rows as $r) {
                echo '<tr>';
                echo '<td>'.intval($r->id).'</td>';
                echo '<td>'.esc_html($r->name).'</td>';
                echo '<td>'.esc_html($r->slug).'</td>';
                echo '<td>'.esc_html($r->endpoint).'</td>';
                echo '<td>'.esc_html($r->method).'</td>';
                echo '<td>'.esc_html($r->grp).'</td>';
                echo '<td>'.esc_html($r->roles).'</td>';
                echo '<td>
                    <a href="'.admin_url('admin.php?page=agc_main&edit='.$r->id).'">编辑</a> |
                    <a href="'.admin_url('admin.php?page=agc_main&delete='.$r->id).'" onclick="return confirm(\'确定要删除该接口吗？\')">删除</a> |
                    <a href="#" class="agc-test-btn" data-id="'.intval($r->id).'">测试</a>
                </td>';
                echo '</tr>';
            }
            echo '</tbody></table>';
        } else {
            echo '<p>暂无接口，请先添加。</p>';
        }

        // 前端JS：测试按钮
        echo <<<EOT
<script>
jQuery(function($){
    $('.agc-test-btn').on('click', function(e){
        e.preventDefault();
        var btn = $(this);
        var id = btn.data('id');
        btn.text('测试中...');
        $.post(ajaxurl, {action:'agc_test_interface', id:id}, function(res){
            if(res.success){
                alert('HTTP状态: ' + res.data.http_code + '\\n返回内容: ' + res.data.body);
            }else{
                alert('测试失败: ' + res.data);
            }
            btn.text('测试');
        });
    });
});
</script>
EOT;

        echo '</div>';
    }

    // AJAX handler: 测试接口通断
    public function ajax_test_interface() {
        if (!current_user_can('manage_options')) wp_send_json_error('权限不足');
        $id = intval($_POST['id'] ?? 0);
        if (!$id) wp_send_json_error('参数错误');
        global $wpdb;
        $t = $wpdb->prefix . self::T_INTERFACES;
        $row = $wpdb->get_row($wpdb->prepare("SELECT * FROM $t WHERE id=%d", $id));
        if (!$row) wp_send_json_error('接口不存在');

        $args = [
            'method' => $row->method,
            'headers' => $row->headers ? json_decode($row->headers, true) : [],
            'body' => $row->body ?: null,
            'timeout' => 10,
        ];
        // 防止GET带body
        if ($row->method == 'GET') unset($args['body']);
        $result = wp_remote_request($row->endpoint, $args);

        if (is_wp_error($result)) {
            wp_send_json_error('请求失败: ' . $result->get_error_message());
        } else {
            $code = wp_remote_retrieve_response_code($result);
            $body = wp_remote_retrieve_body($result);
            $body = mb_substr($body, 0, 200);
            wp_send_json_success([
                'http_code' => $code,
                'body' => $body
            ]);
        }
    }

    // 其他函数保持不变...

    // 占位以防出错
    public function register_routes() {}
    public function shortcode_user_credits() {}
    public function page_logs() {}
    public function page_settings() {}
    public function page_apikeys() {}
}

new AGC_V41();
